#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_NeoPixel.h>

// Configurações da fita de LED
#define NUM_LEDS 60
#define LED_PIN 18 // Pino digital para a fita de LED (ajuste conforme sua conexão)

// Pino do LED de teste
#define TEST_LED_PIN 2

// Pinos adicionais para controle
#define PIN_21 21
#define PIN_22 22
#define PIN_23 23

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// Credenciais Wi-Fi e MQTT
const char* ssid = "INTELBRAS - JOAO";
const char* password = "jps510123";
const char* mqttServer = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);

void setupWifi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void testLed() {
  pinMode(TEST_LED_PIN, OUTPUT);
  for (int i = 0; i < 5; i++) {
    digitalWrite(TEST_LED_PIN, HIGH);
    delay(500);
    digitalWrite(TEST_LED_PIN, LOW);
    delay(500);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String message = String((char*)payload).substring(0, length);
  
  if (message == "teste") {
    testLed();
  } else if (message == "OFF") {
    // Desliga a fita de LED
    for (int i = 0; i < NUM_LEDS; i++) {
      strip.setPixelColor(i, strip.Color(0, 0, 0));
    }
    strip.show();
    
    // Desliga o LED de teste
    digitalWrite(TEST_LED_PIN, LOW);
    
    // Desliga os pinos adicionais
    digitalWrite(PIN_21, LOW);
    digitalWrite(PIN_22, LOW);
    digitalWrite(PIN_23, LOW);
  } else if (message == "PIN21") {
    // Alterna o estado do pino 21
    int state = digitalRead(PIN_21);
    digitalWrite(PIN_21, !state);
  } else if (message == "PIN22") {
    // Alterna o estado do pino 22
    int state = digitalRead(PIN_22);
    digitalWrite(PIN_22, !state);
  } else if (message == "PIN23") {
    // Alterna o estado do pino 23
    int state = digitalRead(PIN_23);
    digitalWrite(PIN_23, !state);
  } else {
    // Assumindo que o formato de cor RGB seja "[r,g,b]"
    int r, g, b;
    if (sscanf(message.c_str(), "[%d,%d,%d]", &r, &g, &b) == 3) {
      // Ajuste a fita de LED com os valores RGB
      for (int i = 0; i < NUM_LEDS; i++) {
        strip.setPixelColor(i, strip.Color(r, g, b));
      }
      strip.show();
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    String clientId = "ESP32_K" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      client.subscribe("ledControl");
    } else {
      delay(5000);
    }
  }
}

void setup() {
  pinMode(TEST_LED_PIN, OUTPUT); // Inicializa o pino do LED de teste
  pinMode(PIN_21, OUTPUT); // Inicializa os pinos adicionais
  pinMode(PIN_22, OUTPUT);
  pinMode(PIN_23, OUTPUT);
  
  strip.begin();
  strip.show(); // Inicializa a fita de LED com a cor apagada
  
  setupWifi();
  client.setServer(mqttServer, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  delay(500);
}
